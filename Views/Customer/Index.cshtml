@model List<CustomerHub.Models.Customer>
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Customers</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            background-color: #eee;
            font-family: Arial, sans-serif;
        }

        .page-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .title {
            margin-bottom: 10px;
        }

        .btn {
            padding: 6px 12px;
            margin: 5px;
            cursor: pointer;
        }

        .table-container {
            width: 50%;
            min-width: 300px;
            margin-bottom: 10px;
            text-align: center;
        }

        .scrollable {
            max-height: 300px;
            border: 1px solid #000;
            overflow-y: auto;
            background-color: #fff;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            text-align: center;
        }

        th, td {
            border: 1px solid #000;
            padding: 8px;
        }

            th.sortable {
                cursor: pointer;
                background-color: #f2f2f2;
            }

        .link-blue {
            color: blue;
            text-decoration: underline;
            cursor: pointer;
        }
        /* Overlay and Popup Styling */
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .popup {
            background-color: #fff;
            width: 350px;
            margin: 100px auto;
            padding: 20px;
            position: relative;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }

        .closeBtn {
            position: absolute;
            top: 8px;
            right: 12px;
            cursor: pointer;
            font-weight: bold;
        }

        .sub-popup {
            display: none;
            position: absolute;
            top: 50px;
            left: 50px;
            width: 250px;
            background: #fff;
            border: 1px solid #ccc;
            padding: 10px;
            box-shadow: 0 1px 6px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <div class="page-container">
        <h3 class="title">Customers</h3>
        <div>
            <button class="btn" onclick="openNewCustomerPopup()">Add New Customer</button>
            <button class="btn" onclick="location.href='/User/Settings'">My Profile</button>
            <button class="btn" onclick="location.href='/Account/Logout'">Logout</button>
        </div>
        <div class="table-container">
            <div class="scrollable">
                <table id="customersTable">
                    <thead>
                        <tr>
                            <th class="sortable" onclick="sortTable('name')">Name</th>
                            <th>Address</th>
                            <th>Phone</th>
                            <th>Edit</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Count > 0)
                        {
                            foreach (var c in Model)
                            {
                                <tr>
                                    <td>@c.Name</td>
                                    <td>
                                        <span class="link-blue" onclick="openAddressPopup(@c.CustomerId)">view</span>
                                    </td>
                                    <td>
                                        <span class="link-blue" onclick="openPhonePopup(@c.CustomerId)">view</span>
                                    </td>
                                    <td>
                                        <span class="link-blue" onclick="openEditCustomerPopup(@c.CustomerId, '@c.Name')">edit</span>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="4">No customers found.</td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Yeni Customer pop-up -->
    <div id="newCustomerOverlay" class="overlay">
        <div class="popup">
            <span class="closeBtn" onclick="closeNewCustomerPopup()">X</span>
            <h4>Add New Customer</h4>
            <form method="post" action="/Customer/Create">
                <label>Customer Name:</label><br />
                <input type="text" name="name" required /><br /><br />
                <label>Primary Address:</label><br />
                <input type="text" name="address" /><br /><br />
                <label>Primary Phone:</label><br />
                <input type="text" name="phone" /><br /><br />
                <button type="submit" class="btn">Save</button>
            </form>
        </div>
    </div>

    <!-- Edit Customer pop-up -->
    <div id="editCustomerOverlay" class="overlay">
        <div class="popup">
            <span class="closeBtn" onclick="closeEditCustomerPopup()">X</span>
            <h4>Edit Customer</h4>
            <label>Customer Name:</label><br />
            <input type="text" id="editCustomerName" /><br /><br />
            <div>
                <button class="btn" onclick="updateCustomer()">Save Changes</button>
                <button class="btn" onclick="deleteCustomer()">Delete Customer</button>
            </div>
        </div>
    </div>

    <!-- Adres pop-up -->
    <div id="addressOverlay" class="overlay">
        <div class="popup" id="addressPopup">
            <span class="closeBtn" onclick="closeAddressPopup()">X</span>
            <h3>Customer Addresses</h3>
            <div style="max-height:200px; overflow-y:auto; border:1px solid #ccc; margin-bottom:10px;">
                <table id="addressTable" style="width:100%; border-collapse:collapse; text-align:center;"></table>
            </div>
            <a href="#" class="link-blue" onclick="openNewAddressPopup()">add a new address</a>
            <!-- adres sub pop-up -->
            <div id="newAddressPopup" class="sub-popup">
                <span style="cursor:pointer; float:right;" onclick="closeNewAddressPopup()">X</span>
                <h4>Add New Address</h4>
                <input type="text" id="newAddressLine" style="width:90%;" />
                <br /><br />
                <button onclick="createAddress()">Save</button>
            </div>
            <button class="btn" style="margin-top:10px;" onclick="closeAddressPopup()">Close</button>
        </div>
    </div>

    <!-- telefon pop-up -->
    <div id="phoneOverlay" class="overlay">
        <div class="popup" id="phonePopup">
            <span class="closeBtn" onclick="closePhonePopup()">X</span>
            <h3>Customer Phones</h3>
            <div style="max-height:200px; overflow-y:auto; border:1px solid #ccc; margin-bottom:10px;">
                <table id="phoneTable" style="width:100%; border-collapse:collapse; text-align:center;"></table>
            </div>
            <a href="#" class="link-blue" onclick="openNewPhonePopup()">add a new number</a>
            <!-- Yeni telefon sub pop-up -->
            <div id="newPhonePopup" class="sub-popup">
                <span style="cursor:pointer; float:right;" onclick="closeNewPhonePopup()">X</span>
                <h4>Add New Phone</h4>
                <input type="text" id="newPhoneNumber" style="width:90%;" />
                <br /><br />
                <button onclick="createPhone()">Save</button>
            </div>
            <button class="btn" style="margin-top:10px;" onclick="closePhonePopup()">Close</button>
        </div>
    </div>

    <script>

        // Alfabetik sort

        let sortDirection = { name: 'asc' };
        function sortTable(column) {
            const table = document.getElementById("customersTable");
            const tbody = table.getElementsByTagName("tbody")[0];
            let rows = Array.from(tbody.getElementsByTagName("tr"));
            const currentDir = sortDirection[column];
            const multiplier = (currentDir === 'asc') ? 1 : -1;
            rows.sort((a, b) => {
                let aVal = a.cells[0].innerText.toLowerCase();
                let bVal = b.cells[0].innerText.toLowerCase();
                if (aVal < bVal) return -1 * multiplier;
                if (aVal > bVal) return 1 * multiplier;
                return 0;
            });
            sortDirection[column] = (currentDir === 'asc') ? 'desc' : 'asc';
            rows.forEach(row => tbody.appendChild(row));
        }

        // Yeni Customer pop-up

        function openNewCustomerPopup() {
            document.getElementById('newCustomerOverlay').style.display = 'block';
        }
        function closeNewCustomerPopup() {
            document.getElementById('newCustomerOverlay').style.display = 'none';
        }

        // Edit Customer pop-up 

        let currentCustomerId = 0;
        function openEditCustomerPopup(customerId, customerName) {
            currentCustomerId = customerId;
            document.getElementById('editCustomerOverlay').style.display = 'block';
            document.getElementById('editCustomerName').value = customerName;
        }
        function closeEditCustomerPopup() {
            document.getElementById('editCustomerOverlay').style.display = 'none';
        }
        function updateCustomer() {
            const newName = document.getElementById('editCustomerName').value.trim();
            if (!newName) {
                alert("Customer name cannot be empty.");
                return;
            }
            fetch('/Customer/UpdateCustomer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `customerId=${currentCustomerId}&newName=${encodeURIComponent(newName)}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Update failed");
                    location.reload();
                })
                .catch(err => console.error(err));
        }
        function deleteCustomer() {
            if (!confirm("Are you sure you want to delete this customer?")) return;
            fetch('/Customer/DeleteCustomer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `customerId=${currentCustomerId}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Delete failed");
                    location.reload();
                })
                .catch(err => console.error(err));
        }

        // Adres pop-up
        
        let currentCustomerIdForAddresses = 0;
        function openAddressPopup(customerId) {
            currentCustomerIdForAddresses = customerId;
            document.getElementById('addressOverlay').style.display = 'block';
            loadAddresses(customerId);
        }
        function closeAddressPopup() {
            document.getElementById('addressOverlay').style.display = 'none';
        }
        function loadAddresses(customerId) {
            fetch(`/Customer/GetAddresses?customerId=${customerId}`)
                .then(res => res.json())
                .then(data => {
                    populateAddressTable(data);
                })
                .catch(err => console.error("loadAddresses error:", err));
        }
        function populateAddressTable(addresses) {
            const table = document.getElementById('addressTable');
            table.innerHTML = "";
            if (!addresses || addresses.length === 0) {
                table.innerHTML = "<tr><td colspan='3'>No addresses found.</td></tr>";
                return;
            }
            addresses.forEach(addr => {
                const row = document.createElement('tr');
                // Adres Input
                const addressCell = document.createElement('td');
                addressCell.style.border = "1px solid #000";
                const addressInput = document.createElement('input');
                addressInput.type = "text";
                addressInput.value = addr.addressLine;
                addressInput.disabled = true;
                addressInput.style.width = "90%";
                addressCell.appendChild(addressInput);
                // Edit/Confirm 
                const editCell = document.createElement('td');
                editCell.style.border = "1px solid #000";
                const editBtn = document.createElement('button');
                editBtn.textContent = "Edit";
                editBtn.onclick = function () {
                    if (editBtn.textContent === "Edit") {
                        addressInput.disabled = false;
                        editBtn.textContent = "Confirm";
                    } else {
                        updateAddress(addr.addressId, addressInput.value);
                        addressInput.disabled = true;
                        editBtn.textContent = "Edit";
                    }
                };
                editCell.appendChild(editBtn);
                // Delete
                const delCell = document.createElement('td');
                delCell.style.border = "1px solid #000";
                const delBtn = document.createElement('button');
                delBtn.textContent = "Delete";
                delBtn.onclick = function () {
                    if (confirm("Delete this address?")) {
                        deleteAddress(addr.addressId);
                    }
                };
                delCell.appendChild(delBtn);
                row.appendChild(addressCell);
                row.appendChild(editCell);
                row.appendChild(delCell);
                table.appendChild(row);
            });
        }
        function updateAddress(addressId, newValue) {
            fetch('/Customer/UpdateAddress', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `addressId=${addressId}&newValue=${encodeURIComponent(newValue)}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Update failed");
                })
                .catch(err => console.error("updateAddress error:", err));
        }
        function deleteAddress(addressId) {
            fetch('/Customer/DeleteAddress', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `addressId=${addressId}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Delete failed");
                    loadAddresses(currentCustomerIdForAddresses);
                })
                .catch(err => console.error("deleteAddress error:", err));
        }
        function openNewAddressPopup() {
            document.getElementById('newAddressPopup').style.display = 'block';
        }
        function closeNewAddressPopup() {
            document.getElementById('newAddressPopup').style.display = 'none';
        }
        function createAddress() {
            const addrLine = document.getElementById('newAddressLine').value.trim();
            if (!addrLine) {
                alert("Please enter an address.");
                return;
            }
            fetch('/Customer/CreateAddress', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `customerId=${currentCustomerIdForAddresses}&addressLine=${encodeURIComponent(addrLine)}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Create failed");
                    closeNewAddressPopup();
                    document.getElementById('newAddressLine').value = "";
                    loadAddresses(currentCustomerIdForAddresses);
                })
                .catch(err => console.error("createAddress error:", err));
        }

        
        // Telefon pop-up
        
        let currentCustomerIdForPhones = 0;
        function openPhonePopup(customerId) {
            currentCustomerIdForPhones = customerId;
            document.getElementById('phoneOverlay').style.display = 'block';
            loadPhones(customerId);
        }
        function closePhonePopup() {
            document.getElementById('phoneOverlay').style.display = 'none';
        }
        function loadPhones(customerId) {
            fetch(`/Customer/GetPhones?customerId=${customerId}`)
                .then(res => res.json())
                .then(data => {
                    populatePhoneTable(data);
                })
                .catch(err => console.error("loadPhones error:", err));
        }
        function populatePhoneTable(phones) {
            const table = document.getElementById('phoneTable');
            table.innerHTML = "";
            if (!phones || phones.length === 0) {
                table.innerHTML = "<tr><td colspan='3'>No phone numbers found.</td></tr>";
                return;
            }
            phones.forEach(ph => {
                const row = document.createElement('tr');
                // Telefon input 
                const phoneCell = document.createElement('td');
                phoneCell.style.border = "1px solid #000";
                const phoneInput = document.createElement('input');
                phoneInput.type = "text";
                phoneInput.value = ph.phoneNumber;
                phoneInput.disabled = true;
                phoneInput.style.width = "90%";
                phoneCell.appendChild(phoneInput);
                // Edit/Confirm
                const editCell = document.createElement('td');
                editCell.style.border = "1px solid #000";
                const editBtn = document.createElement('button');
                editBtn.textContent = "Edit";
                editBtn.onclick = function () {
                    if (editBtn.textContent === "Edit") {
                        phoneInput.disabled = false;
                        editBtn.textContent = "Confirm";
                    } else {
                        updatePhone(ph.phoneId, phoneInput.value);
                        phoneInput.disabled = true;
                        editBtn.textContent = "Edit";
                    }
                };
                editCell.appendChild(editBtn);
                // Delete 
                const delCell = document.createElement('td');
                delCell.style.border = "1px solid #000";
                const delBtn = document.createElement('button');
                delBtn.textContent = "Delete";
                delBtn.onclick = function () {
                    if (confirm("Delete this phone number?")) {
                        deletePhone(ph.phoneId);
                    }
                };
                delCell.appendChild(delBtn);
                row.appendChild(phoneCell);
                row.appendChild(editCell);
                row.appendChild(delCell);
                table.appendChild(row);
            });
        }
        function updatePhone(phoneId, newValue) {
            fetch('/Customer/UpdatePhone', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `phoneId=${phoneId}&newValue=${encodeURIComponent(newValue)}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Update failed");
                })
                .catch(err => console.error("updatePhone error:", err));
        }
        function deletePhone(phoneId) {
            fetch('/Customer/DeletePhone', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `phoneId=${phoneId}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Delete failed");
                    loadPhones(currentCustomerIdForPhones);
                })
                .catch(err => console.error("deletePhone error:", err));
        }
        function openNewPhonePopup() {
            document.getElementById('newPhonePopup').style.display = 'block';
        }
        function closeNewPhonePopup() {
            document.getElementById('newPhonePopup').style.display = 'none';
        }
        function createPhone() {
            const phLine = document.getElementById('newPhoneNumber').value.trim();
            if (!phLine) {
                alert("Please enter a phone number.");
                return;
            }
            fetch('/Customer/CreatePhone', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `customerId=${currentCustomerIdForPhones}&phoneNumber=${encodeURIComponent(phLine)}`
            })
                .then(res => {
                    if (!res.ok) throw new Error("Create failed");
                    closeNewPhonePopup();
                    document.getElementById('newPhoneNumber').value = "";
                    loadPhones(currentCustomerIdForPhones);
                })
                .catch(err => console.error("createPhone error:", err));
        }
    </script>
</body>
</html>
